// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/session.dart';
import 'domain/models/support_card.dart';
import 'domain/models/talk.dart';
import 'domain/models/theme_card.dart';
import 'domain/models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2009578986103212548),
      name: 'User',
      lastPropertyId: const IdUid(3, 7945753293395431866),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2933519175349295425),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5329927296244767264),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7945753293395431866),
            name: 'team',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'talks', srcEntity: 'Talk', srcField: 'user')
      ]),
  ModelEntity(
      id: const IdUid(2, 7523075812434985624),
      name: 'SupportCard',
      lastPropertyId: const IdUid(6, 3004164995997978754),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6412979278448205242),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 3935120429150766033),
            name: 'situation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3754007626698169638),
            name: 'advice',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5904567145081543900),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3004164995997978754),
            name: 'remarks',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6396771214201825356),
      name: 'ThemeCard',
      lastPropertyId: const IdUid(7, 2459134621113802595),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7799002690302091823),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 5321449004885325736),
            name: 'theme',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5368290601811217531),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4136712327409866865),
            name: 'question',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7753325160718166144),
            name: 'level',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2459134621113802595),
            name: 'remarks',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8161278693556691108),
      name: 'Session',
      lastPropertyId: const IdUid(5, 6749613715632658600),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1873491567979912445),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4240032742112221808),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 848057104190270163),
            name: 'talkId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 3199733224183136685),
            relationTarget: 'Talk'),
        ModelProperty(
            id: const IdUid(4, 8202332186719760625),
            name: 'usedThemeCardId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 1603394186123264021),
            relationTarget: 'ThemeCard')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4421931385673825287),
            name: 'usedSupportCards',
            targetId: const IdUid(2, 7523075812434985624))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5983027335870608875),
      name: 'Talk',
      lastPropertyId: const IdUid(4, 3026236419536972974),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 233873084650892178),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5825030105102355764),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3180457027914133256),
            name: 'memo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3026236419536972974),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 8542434391590332793),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'sessions', srcEntity: 'Session', srcField: 'talk')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 5983027335870608875),
      lastIndexId: const IdUid(4, 8542434391590332793),
      lastRelationId: const IdUid(1, 4421931385673825287),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [6138425523919966058],
      retiredPropertyUids: const [
        4509549394685160263,
        2684598857201870554,
        6749613715632658600
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              RelInfo<Talk>.toOneBacklink(
                      4, object.id!, (Talk srcObject) => srcObject.user):
                  object.talks
            },
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final teamOffset = fbb.writeString(object.team);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, teamOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              team: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4));
          InternalToManyAccess.setRelInfo<User>(
              object.talks,
              store,
              RelInfo<Talk>.toOneBacklink(
                  4, object.id!, (Talk srcObject) => srcObject.user));
          return object;
        }),
    SupportCard: EntityDefinition<SupportCard>(
        model: _entities[1],
        toOneRelations: (SupportCard object) => [],
        toManyRelations: (SupportCard object) => {},
        getId: (SupportCard object) => object.id,
        setId: (SupportCard object, int id) {
          object.id = id;
        },
        objectToFB: (SupportCard object, fb.Builder fbb) {
          final situationOffset = fbb.writeString(object.situation);
          final adviceOffset = fbb.writeString(object.advice);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(2, situationOffset);
          fbb.addOffset(3, adviceOffset);
          fbb.addInt64(4, object.level);
          fbb.addOffset(5, remarksOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SupportCard(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              situation: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              advice: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              level:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              remarks: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    ThemeCard: EntityDefinition<ThemeCard>(
        model: _entities[2],
        toOneRelations: (ThemeCard object) => [],
        toManyRelations: (ThemeCard object) => {},
        getId: (ThemeCard object) => object.id,
        setId: (ThemeCard object, int id) {
          object.id = id;
        },
        objectToFB: (ThemeCard object, fb.Builder fbb) {
          final themeOffset = fbb.writeString(object.theme);
          final categoryOffset = fbb.writeString(object.category);
          final questionOffset = fbb.writeString(object.question);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(2, themeOffset);
          fbb.addOffset(3, categoryOffset);
          fbb.addOffset(4, questionOffset);
          fbb.addInt64(5, object.level);
          fbb.addOffset(6, remarksOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ThemeCard(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              theme: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              question: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              level:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              remarks: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));

          return object;
        }),
    Session: EntityDefinition<Session>(
        model: _entities[3],
        toOneRelations: (Session object) => [object.talk, object.usedThemeCard],
        toManyRelations: (Session object) =>
            {RelInfo<Session>.toMany(1, object.id!): object.usedSupportCards},
        getId: (Session object) => object.id,
        setId: (Session object, int id) {
          object.id = id;
        },
        objectToFB: (Session object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.talk.targetId);
          fbb.addInt64(3, object.usedThemeCard.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = Session(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue));
          object.talk.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.talk.attach(store);
          object.usedThemeCard.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.usedThemeCard.attach(store);
          InternalToManyAccess.setRelInfo<Session>(object.usedSupportCards,
              store, RelInfo<Session>.toMany(1, object.id!));
          return object;
        }),
    Talk: EntityDefinition<Talk>(
        model: _entities[4],
        toOneRelations: (Talk object) => [object.user],
        toManyRelations: (Talk object) => {
              RelInfo<Session>.toOneBacklink(
                      3, object.id!, (Session srcObject) => srcObject.talk):
                  object.sessions
            },
        getId: (Talk object) => object.id,
        setId: (Talk object, int id) {
          object.id = id;
        },
        objectToFB: (Talk object, fb.Builder fbb) {
          final memoOffset =
              object.memo == null ? null : fbb.writeString(object.memo!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.createdAt?.millisecondsSinceEpoch);
          fbb.addOffset(2, memoOffset);
          fbb.addInt64(3, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final object = Talk(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              createdAt: createdAtValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdAtValue),
              memo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.user.attach(store);
          InternalToManyAccess.setRelInfo<Talk>(
              object.sessions,
              store,
              RelInfo<Session>.toOneBacklink(
                  3, object.id!, (Session srcObject) => srcObject.talk));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.team]
  static final team = QueryStringProperty<User>(_entities[0].properties[2]);
}

/// [SupportCard] entity fields to define ObjectBox queries.
class SupportCard_ {
  /// see [SupportCard.id]
  static final id =
      QueryIntegerProperty<SupportCard>(_entities[1].properties[0]);

  /// see [SupportCard.situation]
  static final situation =
      QueryStringProperty<SupportCard>(_entities[1].properties[1]);

  /// see [SupportCard.advice]
  static final advice =
      QueryStringProperty<SupportCard>(_entities[1].properties[2]);

  /// see [SupportCard.level]
  static final level =
      QueryIntegerProperty<SupportCard>(_entities[1].properties[3]);

  /// see [SupportCard.remarks]
  static final remarks =
      QueryStringProperty<SupportCard>(_entities[1].properties[4]);
}

/// [ThemeCard] entity fields to define ObjectBox queries.
class ThemeCard_ {
  /// see [ThemeCard.id]
  static final id = QueryIntegerProperty<ThemeCard>(_entities[2].properties[0]);

  /// see [ThemeCard.theme]
  static final theme =
      QueryStringProperty<ThemeCard>(_entities[2].properties[1]);

  /// see [ThemeCard.category]
  static final category =
      QueryStringProperty<ThemeCard>(_entities[2].properties[2]);

  /// see [ThemeCard.question]
  static final question =
      QueryStringProperty<ThemeCard>(_entities[2].properties[3]);

  /// see [ThemeCard.level]
  static final level =
      QueryIntegerProperty<ThemeCard>(_entities[2].properties[4]);

  /// see [ThemeCard.remarks]
  static final remarks =
      QueryStringProperty<ThemeCard>(_entities[2].properties[5]);
}

/// [Session] entity fields to define ObjectBox queries.
class Session_ {
  /// see [Session.id]
  static final id = QueryIntegerProperty<Session>(_entities[3].properties[0]);

  /// see [Session.createdAt]
  static final createdAt =
      QueryIntegerProperty<Session>(_entities[3].properties[1]);

  /// see [Session.talk]
  static final talk =
      QueryRelationToOne<Session, Talk>(_entities[3].properties[2]);

  /// see [Session.usedThemeCard]
  static final usedThemeCard =
      QueryRelationToOne<Session, ThemeCard>(_entities[3].properties[3]);

  /// see [Session.usedSupportCards]
  static final usedSupportCards =
      QueryRelationToMany<Session, SupportCard>(_entities[3].relations[0]);
}

/// [Talk] entity fields to define ObjectBox queries.
class Talk_ {
  /// see [Talk.id]
  static final id = QueryIntegerProperty<Talk>(_entities[4].properties[0]);

  /// see [Talk.createdAt]
  static final createdAt =
      QueryIntegerProperty<Talk>(_entities[4].properties[1]);

  /// see [Talk.memo]
  static final memo = QueryStringProperty<Talk>(_entities[4].properties[2]);

  /// see [Talk.user]
  static final user =
      QueryRelationToOne<Talk, User>(_entities[4].properties[3]);
}
